// Code generated by go-bindata.
// sources:
// skel/scripts/example.py
// skel/scripts/rainbow.py
// skel/scripts/redshift.js
// skel/scripts/redshift.py
// skel/scripts/strip_redblue.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsExamplePy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcd\x8e\xda\x30\x10\x3e\x67\x9e\x62\xaa\x55\x25\x5b\xcd\x42\x42\xc5\x05\x29\xbd\xf5\x29\x10\x8a\xbc\x89\x0d\x69\x9d\x31\x1a\x27\x2b\x78\xfb\x6a\x9c\x84\xb2\x94\x1e\x56\x42\xc2\x1e\x7f\x7f\x9e\x71\x5e\xbe\xac\xc7\xc8\xeb\xb7\x8e\xd6\x96\xde\xf1\x7c\x1d\x4e\x81\x00\x1c\x87\x1e\xd9\xb6\xf1\xd4\xb9\x01\xbb\xfe\x1c\x78\x40\x1e\x29\x47\x1f\x8e\xb0\xec\x0d\xb5\xa1\xcf\x31\x5e\x23\x40\xe3\x4d\x8c\xf8\xf3\x62\xfa\xb3\xb7\x3b\xc8\x3a\x6a\xed\x05\x2b\x2c\x20\x6b\x82\x0f\x8c\x15\xee\x8b\x1c\xe5\x77\x00\xc8\x5a\xeb\xb0\xae\x1b\xe3\x7d\x5d\xab\x68\xbd\xcb\xd1\xb1\xe9\xad\xde\x41\x96\xc9\x7e\xf5\x6b\xec\xcf\xb5\xe1\x30\x52\xab\xf4\x52\x6c\x4e\x86\x8e\xb6\x4e\x8a\xa9\x9a\x48\xfb\x74\x36\x39\x7e\x45\x6f\x49\x4d\x5a\x07\xac\x70\xa2\x09\xfe\x86\x56\x77\xf0\x6f\x58\xea\xe7\x9c\xd6\xf0\x6f\x4b\xea\x2f\x5f\x3f\x15\x78\xfd\x94\xc0\x74\xf1\xfb\xab\xc9\x71\xba\x74\xe7\xe6\x86\xae\xe4\xaf\xa3\x41\x15\x39\x7e\x2f\x34\x56\x15\x16\x02\xc8\xee\x63\x57\x8f\xe0\xd7\x6d\x8e\xdb\x9b\xc3\x87\x3e\xdd\x2c\x5e\x66\x12\x06\x36\x74\xbc\xa2\x1c\x8f\x7c\xeb\xad\x80\xf7\x85\xe4\xff\x37\xc8\x66\xbb\xd5\x1f\x81\xe5\x73\x60\x59\x14\x0f\xc0\xcd\xff\x14\xf5\xfc\x0e\xee\x1a\x95\xa7\x4c\x9c\xa3\x33\xcd\x10\xb8\xda\xac\x8a\x94\x9c\xed\x30\x32\x61\x6f\xce\xca\x9b\xfe\xad\x35\x48\x3b\x14\x21\x5a\x4f\x48\x3d\x33\x35\x80\x48\x46\xcb\x9d\x8d\xca\x3a\x67\x9b\x21\x8a\x84\x54\x79\x5c\x86\x24\x9a\x2e\x30\x4e\x00\xec\x68\x5e\xc5\xd4\xe8\x69\x3d\x43\x61\x31\xe7\x91\x00\x08\xab\xe4\x1b\xaf\x71\x65\xf8\xf8\xbe\x2f\x0f\x1a\x3b\x97\xe6\xbf\xd4\x34\xfe\xc0\x12\xad\x8f\x16\x4b\x80\x59\x58\xde\xff\xfc\x75\x28\x8d\xe2\x5d\x8b\xed\x45\x26\x61\x15\xe9\x03\x48\xba\x87\xdc\x1a\xfe\x04\x00\x00\xff\xff\x8e\x8e\x6a\x46\xa0\x03\x00\x00")

func scriptsExamplePyBytes() ([]byte, error) {
	return bindataRead(
		_scriptsExamplePy,
		"scripts/example.py",
	)
}

func scriptsExamplePy() (*asset, error) {
	bytes, err := scriptsExamplePyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/example.py", size: 928, mode: os.FileMode(493), modTime: time.Unix(1513461529, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsRainbowPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xed\x8e\x9b\x30\x10\xfc\xed\x7d\x8a\xad\xaa\x4a\xb8\x21\x1f\xa4\x8a\x2a\xa1\xd2\x47\xe8\x0b\x44\x28\x32\xc7\x02\xae\x88\x8d\xd6\xe6\xae\xf4\xe9\x2b\x1b\x27\xb9\x9c\xfa\xcb\xd9\xc9\xee\x30\x3b\x3b\x9f\x3f\xed\x67\xc7\xfb\x46\x9b\xfd\xb4\xf8\xc1\x1a\x00\x7d\x9d\x2c\x7b\x7c\xb1\xa3\x65\xb7\xb8\x1c\x59\x99\xd6\x5e\x73\x74\x8b\x83\x8e\xed\x15\x99\x5a\x37\xe8\xce\x63\x6a\xe5\xd9\x00\xbc\x0d\x44\x23\x56\xf8\xcb\x1a\x02\xa7\xff\x12\x56\x58\x9c\x0e\xe0\x26\xa2\x36\xfc\x86\x86\x75\x3f\x78\x43\xce\x85\x72\x77\x00\xa7\xfc\xcc\xca\x6b\x6b\x12\x00\x9e\x97\x12\x44\x9a\xd6\xc6\x67\x6e\x71\x3b\xc5\xfd\xeb\xb9\xa8\x25\xd0\x9f\x17\x9a\x7c\x89\x93\x72\x0e\xa0\xa5\x0e\x59\x69\xd3\xd8\xb7\xac\x63\x75\x25\x59\x82\xe8\x47\xdb\xa8\x11\xa3\x98\x1c\x03\x51\x8e\x51\x01\x08\xdd\xad\x30\x6a\x17\x45\x96\x20\xc4\x4d\x74\x4f\x86\x58\x79\xba\x44\x20\x8b\x02\x2c\xe3\x48\x26\x51\x4b\x10\x34\xba\xa7\x99\xf8\x9e\xb7\x91\xbd\xac\x71\x93\x80\x72\x45\x6a\x10\xaa\xfd\x3d\x3b\x7f\x89\x65\x26\xa3\x80\x64\x46\x85\x87\x12\x04\x22\xe2\xc3\x1d\xc1\xe4\x67\x36\x2b\x0b\x80\xc6\x0a\x0f\x71\xc7\x67\x9a\xc7\x8e\x11\xc8\x51\x47\x62\x8d\x5f\x82\xdb\x37\x6a\xb1\xf2\x6e\xaa\x74\xbc\x5d\x78\x82\x9f\xdb\x22\xc7\x22\x2e\x93\x86\xbe\x9f\xe2\x0c\x2a\xd3\x7e\xec\x2d\x72\x3c\xca\xf0\x6f\x11\x18\xef\xea\x7f\xe2\xb7\x50\xa7\x4f\x6c\xa3\xf6\x95\x6f\x45\x7e\xe0\xf6\x7d\xc3\x26\x36\xe8\xf5\x8d\x0b\xfd\xc7\xec\xb0\xd6\xcd\xd7\x73\x0d\xa2\xb3\x8c\x1a\xb5\x09\x92\x7a\xba\xb7\x88\x61\x0e\xc1\xe8\x46\xab\x7c\xa6\x25\xee\xe3\x85\x41\x08\xee\x1b\xac\xee\x91\xdd\x0d\xee\xf5\xe2\xed\x85\xfb\x26\x1b\xe6\x90\x80\x7b\xd0\x72\x7c\xa4\x50\xde\x8e\xb9\x53\xd3\x44\xa6\xcd\xb2\xb0\xf5\xf1\x74\xfa\xca\x7d\x73\x3e\xd4\x32\xc7\xf7\x40\xf1\x11\x38\xd6\x32\xe4\xe2\xf9\x6e\x3c\x9b\x2c\xa5\x52\xc2\xbf\x00\x00\x00\xff\xff\x62\x84\x50\x40\x5e\x03\x00\x00")

func scriptsRainbowPyBytes() ([]byte, error) {
	return bindataRead(
		_scriptsRainbowPy,
		"scripts/rainbow.py",
	)
}

func scriptsRainbowPy() (*asset, error) {
	bytes, err := scriptsRainbowPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/rainbow.py", size: 862, mode: os.FileMode(493), modTime: time.Unix(1512221632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsRedshiftJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x61\x6f\xdb\x36\x10\xfd\x6c\xfd\x8a\x97\x4f\x96\x1a\x41\x76\x62\xb4\x1b\xa6\xa9\x58\x02\xa4\x45\x8b\x0d\x28\x92\x05\x18\x66\x18\x05\x2d\x9d\x6c\x22\x34\xa9\x92\x54\x12\x2f\xf0\x7f\x1f\x48\x4a\xb2\x9c\x0c\xfb\x64\xe9\xde\xbb\xbb\xc7\x77\x47\xb9\x54\xd2\x58\xd4\x06\x05\x34\xfd\x68\xb9\xa6\x78\x5a\x9b\x69\x92\x47\x51\x80\xfe\xb8\xfa\xeb\xfb\xf5\xfd\xa7\x4f\x37\xb7\xdf\xef\xbe\xfc\x7d\x83\x02\x1f\xde\xbf\x5f\x7c\xc8\xa3\x68\xf6\x2e\xc2\x3b\xdc\x52\x65\xb6\xbc\xb6\xf8\x7a\x87\x2d\x89\x86\x34\x04\x5f\x6b\xa6\xf7\xa8\x95\x06\x3d\x5b\xd2\x92\x09\x98\x52\xf3\xc6\x1a\x97\x12\x97\x09\x2e\xe7\x17\x3f\xe1\x5a\x73\x26\xf1\x15\x37\x4f\x5c\x6e\x1c\xf2\x9b\xe0\x25\x49\x43\xb8\xfa\xfc\xed\x77\x2c\xb2\x79\x04\xdf\xe4\xde\xb0\x0d\xfd\xe2\x9e\x80\x20\x4b\xf7\x6d\x47\xba\xb3\x59\x1f\x75\xfa\x3d\xb9\x0f\xc4\xf1\xba\xad\x6b\xd2\x09\x8a\x8f\x78\x09\x18\x30\x9b\xe1\xcf\x2d\x37\xa0\xba\xa6\xd2\xa2\x6e\x65\x69\xb9\x92\x78\xe2\x42\x60\x4d\x28\x99\x10\x54\x41\xc9\x92\x40\x8f\xe4\x8e\xa4\xd9\x8e\x46\xe9\x5f\x76\x8d\xa0\x1d\x49\x8b\xbd\x6a\x75\x5f\x68\xbd\xc7\x4e\x55\xbc\xde\x73\xb9\x81\xdd\x12\x42\xf3\xb3\x51\x62\xdc\xc5\xc0\x0d\x98\x04\xd3\x9a\xed\xa1\x6a\x08\xaa\x0c\x04\x7f\x20\x2c\x97\x3a\xdd\xa4\xeb\x55\x8a\x2c\xcb\x56\x48\x42\xf2\xc1\x9f\x6c\x16\x45\x3b\x55\xb5\x82\x32\x7a\x6e\x94\xb6\x6e\x7c\x83\x7a\xdd\xca\xb8\x96\x09\x5e\xa2\x49\x37\xdd\xca\xc1\x26\x53\x0d\xc9\xbb\xbd\x2c\xe3\xe9\xac\xa2\xc7\x99\xb1\x15\x97\xd3\x14\x53\xed\xec\xea\xb8\xc6\x6a\xde\xa0\xc0\x72\x95\x3b\x99\xcb\xe5\x6d\xfa\x39\xbd\x5e\xa5\xdd\x6f\x96\xad\xa2\x49\xe0\x2a\x41\x99\x50\x1b\x14\xe8\xdf\x48\x6b\xa5\x73\x87\xd7\x4a\xc7\x79\xee\x25\x4c\x78\x1d\x6b\x62\x55\x5c\x57\x69\xa8\x9e\xe0\xac\xc0\x3c\x80\x93\x5a\xc6\x21\xe8\xdb\xed\x5a\xcb\x2c\x99\x91\x67\x8e\xf3\xa4\xb9\xa5\x31\xcd\x07\xc0\x2d\xd6\xac\x7c\x80\x55\x30\xb6\x52\xad\x8d\x26\x93\x03\x48\x18\x0a\xa5\x1b\xad\x4a\x32\x26\xa3\x67\x6e\xe3\x79\xc8\x24\x55\xa7\x10\x64\xa7\x06\x3f\x5a\xee\x33\xa2\xc9\x21\x3a\xb8\x6d\xc6\x37\xde\x10\xb8\xf2\xf6\x1e\xdd\x7c\xa5\x7d\x70\xb5\x9b\x5f\x01\x49\x4f\xb8\xf6\x2f\xf1\xab\xcb\x72\xb4\x75\xbd\xb7\x64\x6e\x89\x75\x93\x70\x45\xfd\x24\x5c\xe1\x50\x28\xc5\xbc\x7f\xcc\x04\xc9\x8d\xdd\xa6\x90\xad\x10\xae\x46\x2b\x1b\x56\x3e\xc4\xa1\x49\x56\x6b\xb5\xeb\xd6\x39\x1b\xe7\xf6\x2d\x92\x5e\x6b\x1e\x4d\x34\xd9\x56\xcb\x23\x96\xbb\xa3\x1e\xf7\xdc\x1b\xdb\xdf\x8c\x97\x68\x22\x28\x48\xbd\xf2\xeb\x58\xc0\xb7\xed\xf0\x3c\x1a\x1c\x0d\x76\x67\x5d\x7a\xcf\x4f\xf2\xce\xc7\xa0\x13\x86\x34\x67\x82\xff\xc3\x7c\xaf\x13\x53\xc7\x75\xc7\x7d\x4d\xd8\xbc\xb0\x40\x2e\xc8\x8b\x79\x0e\xfe\xeb\x89\x2f\x39\xf8\xf9\x79\x58\x1f\x9f\x93\x35\xad\xd9\x76\xd5\x96\x7c\xb5\x9c\xaf\x9c\xd6\xff\xc6\x2e\xfe\x07\xbb\xf4\xd8\xe1\xad\x0b\x6e\xc0\xfe\xb9\x9b\x72\xc8\x0e\x62\x5c\x8a\xc3\xef\xb9\xb4\x3f\x7b\xd2\xc8\x90\xcc\x90\x0d\xec\xd1\x2c\x4e\xa6\x78\xea\xdd\xe0\x4f\x37\xf0\x01\xee\x37\x63\x30\x4b\x90\x44\x71\x14\xd9\x3b\xf3\xc6\x38\x41\x32\x07\x2f\xf8\xf9\x62\xb8\x8c\x67\xfd\x89\x67\x8b\x55\xe2\xee\xc9\xe8\xbd\xb7\x7f\x1c\x5b\xce\x57\xe3\x56\x4b\xfe\x86\x70\xf1\x8a\x70\x7e\xf1\x86\x72\xf9\x9a\x72\xe9\x28\x87\x3c\x72\x8a\x4e\xa6\x8b\x8f\xee\x70\xb3\x45\x32\x54\xe8\x81\x22\x00\xfe\x1e\x5b\xdd\xca\x92\x59\x72\xff\x2f\x9a\xa1\xe1\xcf\x24\x0c\x9c\xa7\x10\xcc\x7d\xf2\xfc\x77\x7a\x58\x7f\x5f\xc7\x59\xfc\x6f\x00\x00\x00\xff\xff\x70\xeb\xe5\xb7\xef\x06\x00\x00")

func scriptsRedshiftJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsRedshiftJs,
		"scripts/redshift.js",
	)
}

func scriptsRedshiftJs() (*asset, error) {
	bytes, err := scriptsRedshiftJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/redshift.js", size: 1775, mode: os.FileMode(484), modTime: time.Unix(1513461224, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsRedshiftPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x3d\x6b\xc3\x30\x10\x86\x77\xff\x8a\x97\x4c\x32\x31\xa6\x10\x92\x21\xe0\xa1\x85\x04\x3a\x74\xe9\x07\x94\xa6\x21\xd8\xf1\x29\x15\x55\xa4\x70\x92\x48\xfd\xef\x8b\x2c\xd1\xba\xf5\xe6\x7b\x3f\x9e\x3b\xa9\xf3\xc5\xb2\x87\x1b\x5c\x05\xeb\x8a\xe2\xe1\xf6\xf5\x70\xf7\xb2\xdd\x6e\x1e\x0f\x4f\xf7\x6f\x1b\x34\x58\x2d\x97\x8b\x55\x51\xf4\x24\xa1\xed\x49\x9c\xdd\xa9\x5c\x17\x00\x62\xa6\x76\xbe\x27\xe6\xfa\xca\xca\x53\x94\x30\xc7\xec\xdd\xcc\xca\xe4\xe7\x60\x04\x49\x49\x47\x9f\x23\xd7\x0f\xa5\x09\xcf\x1c\x28\xfd\xc7\x4f\x72\x7b\x26\x34\x60\x6a\x7b\x51\xfe\x8c\x99\x5c\xd0\x1e\x0d\x52\x81\x18\x6d\xbf\x72\x22\x66\x93\x65\x64\x39\x61\xc7\xa6\x44\xe8\x82\x44\x03\xeb\xea\x71\x98\x57\x56\xa6\x96\x4a\x93\xb1\xa2\xac\xf0\xef\xe2\x84\x60\xf2\x81\x0d\x82\xb9\xb4\xc7\x4f\xd1\x05\x99\xab\x13\x36\xc1\x12\xc0\xba\x7c\x7d\xee\xb6\xc1\x4f\xca\xc7\x78\xb2\xe7\x86\xc9\x64\x3d\x45\x75\x83\xa7\x96\xb9\x1d\xc4\xd1\xea\x78\x90\x65\x68\xea\xa1\x4c\x7e\xa1\x38\x48\x92\x32\x51\xc9\x7d\x93\x15\xff\xf4\xed\xba\x20\x77\x6a\xad\xe6\x8b\xfd\x18\x55\x31\xf6\xc5\xad\x39\x91\xb8\xa9\xa0\xc9\x8c\x99\x0a\x8b\x72\x5f\x7c\x07\x00\x00\xff\xff\xc3\xef\x77\x42\x06\x02\x00\x00")

func scriptsRedshiftPyBytes() ([]byte, error) {
	return bindataRead(
		_scriptsRedshiftPy,
		"scripts/redshift.py",
	)
}

func scriptsRedshiftPy() (*asset, error) {
	bytes, err := scriptsRedshiftPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/redshift.py", size: 518, mode: os.FileMode(420), modTime: time.Unix(1513461213, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsStrip_redblueJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\x51\x4b\xc3\x30\x14\x05\xe0\xe7\xe6\x57\x1c\xf1\x61\x4d\x0b\x49\x57\x41\x94\x5a\x41\xf0\xd5\x5f\x30\x86\x64\xcd\xed\x7a\x47\x9b\xd6\x24\x9d\x8a\xec\xbf\x4b\x07\x7b\xd8\x83\xbe\x9e\xfb\x5d\xce\xb9\xbd\xd1\x73\xf0\x7a\xc7\x4e\x93\x3b\xc2\x8d\x96\x44\x4f\x11\x9e\x6c\xe8\xb8\x8d\xa8\xe1\xe9\x63\x66\x4f\xe9\x4a\xe9\x4b\xba\x92\x42\xe8\x4c\x20\xc3\x8b\x35\x53\x24\x8b\xd6\x8f\x03\xf6\x1c\xbb\x79\xa7\x9a\x71\xd0\xa1\x31\xae\xe7\x81\x74\x6b\x2c\x35\xc6\xd9\xef\x45\xa7\xf4\x65\x86\xa9\xa7\xa0\x0f\xe6\x68\x42\xe3\x79\x8a\x3a\x44\xcf\xd3\xbb\x27\xbb\xeb\x67\x52\x87\x20\x05\x32\x2d\xc4\xa5\x2b\x4d\x5b\x6f\x06\x92\xa8\x9f\xf1\x23\x92\x76\xf4\x48\x97\x85\x5c\x17\x15\xf8\xe9\x7c\x54\x3d\xb9\x7d\xec\x2a\x70\x9e\xcb\x45\x25\x8b\x58\xc6\x33\x32\x14\xaa\x44\x8e\x57\x13\x49\xb9\xf1\x33\x95\xe7\xa8\x28\xca\x4a\x24\xc9\xf9\x7d\xc3\xdb\x4d\xb1\x45\x8d\x75\xf9\x80\x1c\x8f\xf7\xc8\xf0\x66\x62\xa7\x02\xbb\x34\xca\x2b\xb7\xfe\xd3\x21\x47\xa1\xd6\xd7\xba\xfc\x5f\xdf\x2d\xfa\x24\x4e\xb2\x12\xbf\x01\x00\x00\xff\xff\xa1\x6c\xf9\x66\x89\x01\x00\x00")

func scriptsStrip_redblueJsBytes() ([]byte, error) {
	return bindataRead(
		_scriptsStrip_redblueJs,
		"scripts/strip_redblue.js",
	)
}

func scriptsStrip_redblueJs() (*asset, error) {
	bytes, err := scriptsStrip_redblueJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/strip_redblue.js", size: 393, mode: os.FileMode(493), modTime: time.Unix(1513459071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/example.py": scriptsExamplePy,
	"scripts/rainbow.py": scriptsRainbowPy,
	"scripts/redshift.js": scriptsRedshiftJs,
	"scripts/redshift.py": scriptsRedshiftPy,
	"scripts/strip_redblue.js": scriptsStrip_redblueJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"example.py": &bintree{scriptsExamplePy, map[string]*bintree{}},
		"rainbow.py": &bintree{scriptsRainbowPy, map[string]*bintree{}},
		"redshift.js": &bintree{scriptsRedshiftJs, map[string]*bintree{}},
		"redshift.py": &bintree{scriptsRedshiftPy, map[string]*bintree{}},
		"strip_redblue.js": &bintree{scriptsStrip_redblueJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

